
>>> dir
<built-in function dir>
9
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> a,b =input().split()
10 20
>>> a,b
('10', '20')
>>> a, b = map(int, input().split())
10 20
>>> a,b
(10, 20)
>>> a, b = map(int, input('Enter 2 values:   ').split())
Enter 2 values:   1 2
>>> a,b
(1, 2)
>>> a, b = map(int, input('Enter 2 values:   ').split('$'))
Enter 2 values:   2 3
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    a, b = map(int, input('Enter 2 values:   ').split('$'))
ValueError: invalid literal for int() with base 10: '2 3'
>>> a, b = map(int, input('Enter 2 values:   ').split('$'))
Enter 2 values:   10 20
Traceback (most recent call last):
  File "<pyshell#9>", line 1, in <module>
    a, b = map(int, input('Enter 2 values:   ').split('$'))
ValueError: invalid literal for int() with base 10: '10 20'
>>> a, b = map(int, input('Enter 2 values:   ').split('$'))
Enter 2 values:   10$20
>>> a,b
(10, 20)
>>> dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>>  name = "Kavya Sri" name.capitalize()
 
SyntaxError: unexpected indent
>>> name = "Kavya Sri"
>>> name.capitalize()
'Kavya sri'
>>> help(name.capitalize)
Help on built-in function capitalize:

capitalize() method of builtins.str instance
    Return a capitalized version of the string.
    
    More specifically, make the first character have upper case and the rest lower
    case.

>>> name = "KAVYA SRI"
>>> name.capatalize()
Traceback (most recent call last):
  File "<pyshell#18>", line 1, in <module>
    name.capatalize()
AttributeError: 'str' object has no attribute 'capatalize'
>>> name.capitalize()
'Kavya sri'
>>> type(name)
<class 'str'>
>>> a= 'Vinay asked "How are you" doing'
>>> a
'Vinay asked "How are you" doing'
>>>  name = """KAVYA SRI"""
 
SyntaxError: unexpected indent
>>> name = """KAVYA SRI"""
>>> name
'KAVYA SRI'
>>> name="vinay 'is'"
>>> name
"vinay 'is'"
>>> college = 'PVPSIT'
>>> college[3]
'S'
>>> college[0]
'P'
>>> college[-1]
'T'
>>> 
KeyboardInterrupt
>>> college[-1]
'T'
>>> college[5]
'T'
>>> college[-2]
'I'
>>> college[0:3]
'PVP'
>>> college[0:3:1]
'PVP'
>>> college[0:3:2]
'PP'
>>> college[0:3:3]
'P'
>>> college[0:6:2]
'PPI'
>>> college[::]
'PVPSIT'
>>> college[:]
'PVPSIT'
>>> college[::-1]
'TISPVP'
>>> college[::0]
Traceback (most recent call last):
  File "<pyshell#43>", line 1, in <module>
    college[::0]
ValueError: slice step cannot be zero
>>> college[::-2]
'TSV'
>>> college[::-3]
'TP'
>>> college[:2:-1]
'TIS'
>>> college[-1:-3]
''
>>> college[-3:-1]
'SI'
>>> college[-3:0]
''
>>> college[-1:-4:-1]
'TIS'
>>>  college[-1:2:-1]
 
SyntaxError: unexpected indent
>>> college[-1:2:-1]
'TIS'
>>> college[5:2:-1]
'TIS'
>>> college[3:6:-1]
''
>>> 
